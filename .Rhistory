} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test; \\",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD)
class(result) <- "htest"
return(result)
}
arch.test(mod1)
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test ",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD)
class(result) <- "htest"
return(result)
}
arch.test(mod1)
arch.test(mod1)
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
null.value="h")
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test ",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
null.value="h")
class(result) <- "htest"
return(result)
}
arch.test(mod1)
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test ",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
alternative="h")
class(result) <- "htest"
return(result)
}
arch.test(mod1)
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test ",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
alternative="ARCH effects")
class(result) <- "htest"
return(result)
}
arch.test(mod1)
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test ",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
data.name=deparse((substitute(uhat)))
alternative="ARCH effects")
arch.test(mod1)
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test ",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
data.name=deparse(substitute(uhat)),
alternative="ARCH effects")
class(result) <- "htest"
return(result)
}
arch.test(mod1)
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
uhatnames=deparse(substitute(uhat))
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
uhatnames="Model residuals"
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test ",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
data.name=,
alternative="ARCH effects")
class(result) <- "htest"
return(result)
}
arch.test(mod1)
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
uhatnames=deparse(substitute(uhat))
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
uhatnames=Residuals
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test ",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
data.name=,
alternative="ARCH effects")
class(result) <- "htest"
return(result)
}
arch.test(mod1)
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
uhatnames=deparse(substitute(uhat))
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
uhatnames="Residuals"
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test ",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
data.name=uhatnames,
alternative="ARCH effects")
class(result) <- "htest"
return(result)
}
arch.test(mod1)
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
uhatnames=deparse(substitute(uhat))
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
uhatnames="Model Residuals"
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test ",
"Null hypothesis:  no ARCH effects")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
data.name=uhatnames,
alternative="ARCH effects")
class(result) <- "htest"
return(result)
}
arch.test(mod1)
print.htest
pacman::p_load(EnvStats)
print.htest
arch.test(mod1)
arch.test <- function(y, lags=NULL) {
# Extraire les résidus selon le type d'objet
if (is.numeric(y)) {
uhat <- y
uhatnames=deparse(substitute(uhat))
} else {
model.class <- class(y)[1]
uhat <- switch(model.class,
"lm" = residuals(y),
"ardl" = residuals(y),
"dynlm" = residuals(y),
"arma" = residuals(y),
"ar" = residuals(y),
"dynardl" = y$model$residuals,
"MSM.lm" = MSwM::msmResid(y),
residuals(y))
uhatnames="Model Residuals"
}
T <- base::length(uhat)
if (is.null(lags)) lags <- floor(T^0.25)
X <- stats::embed(uhat^2, lags + 1)
lm_model <- stats::lm(X[, 1] ~ X[, -1])
# Statistique ARCH et p-value
R2 <- summary(lm_model)$r.squared
arch_stat <- T * R2
names(arch_stat) <- "Chi-squared"
p_value <- 1 - stats::pchisq(arch_stat, df = lags)
names(p_value) <- "p.value"
METHOD <- paste("ARCH LM-test")
result <- list(statistic = round(arch_stat, 4),
df = lags,
p.value = round(p_value, 4),
method = METHOD,
data.name=uhatnames,
alternative="ARCH effects",
null="r")
class(result) <- "htest"
return(result)
}
arch.test(mod1)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
tsatoolkit::modelDiagnostics(mod1)
tsatoolkit::modelDiagnostics(mod1, model.class = "ar")
tsatoolkit::modelDiagnostics(mod1, model.class = "arma")
devtools::document()
rm(list = c("arch.test"))
devtools::document()
tsatoolkit::modelDiagnostics(mod1, model.class = "arma")
tsatoolkit::modelDiagnostics(mod1)
uhat2
lm1 <- lm(randomwalk~rnorm(1000))
tsatoolkit::modelDiagnostics(lm1)
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
embed(1:10^2, 3)
tsatoolkit::arch.test(lm1)
list(tsatoolkit::arch.test(lm1))
objects(tsatoolkit::arch.test(lm1))
arc <- tsatoolkit::arch.test(lm1)
arc$statistic
arc$p.value
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
devtools::document()
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
tsatoolkit::modelDiagnostics(lm1)
tsatoolkit::modelDiagnostics(lm1)
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
devtools::document()
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
devtools::document()
devtools::document()
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
tsatoolkit::modelDiagnostics(lm1)
devtools::document()
tsatoolkit::modelDiagnostics(lm1)
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
devtools::document()
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
tsatoolkit::modelDiagnostics(mod1, model.class = "ar")
devtools::document()  # Générer la documentation
devtools::install()
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
tsatoolkit::modelDiagnostics(mod1, model.class = "ar")
remove.packages("tsatoolkit")
tsatoolkit::modelDiagnostics(mod1, model.class = "ar")
tsatoolkit::modelDiagnostics(lm1, model.class = "ar")
tsatoolkit::modelDiagnostics(lm1, model.class = "ar",format = "latex")
