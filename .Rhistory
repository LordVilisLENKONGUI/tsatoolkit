for (test in names(test_map)) {
if (!is.null(results[[test]])) {
test_results <- rbind(test_results,
add_test_result(test_map[test],
results[[test]]))
}
}
# Format output table
options(knitr.kable.NA = "")
fmt <- if (is.null(format)) "rst" else format
formatted_table <- kableExtra::kable(
test_results,
format = fmt,
align = rep('c', ncol(test_results)),
booktabs = TRUE,
digits = c(0, rep(round, ncol(test_results) - 1))
)
# Store all results
results$full_tests <- list(
autocorr_bg = results$autocorr_bg,
autocorr_lb = results$autocorr_lb,
hetero_white = results$hetero_white,
hetero_Arch = results$hetero_Arch,
normality = results$normality
)
results$summary <- formatted_table
}, error = function(e) {
warning(sprintf("Error executing tests: %s", e$message))
return(NULL)
})
# Add attributes
attr(results, "model.class") <- model.class
attr(results, "significance_level") <- significance_level
return(results)
}
#' @export
print.post_diagnostics <- function(x, ...) {
cat("Diagnostic Tests Results\n\n")
print(x$summary)
invisible(x)
}
linmod <- lm(sr~pop15+pop75 , data = LifeCycleSavings) ; summary(linmod)
attributes(linmod)
model.diagnostics(linmod)
# Utilisation du dataset LifeCycleSavings intégré à R
linmod <- lm(sr ~ pop15 + pop75, data = LifeCycleSavings)
# Voir le résumé du modèle
summary(linmod)
# Voir les attributs du modèle
attributes(linmod)
# Appliquer les diagnostics
model.diagnostics(linmod)
tsatoolkit::model.diagnostics(linmod)
tsatoolkit::model.diagnostics(linmod, format = "latex")
ARDL::ardl(sr~pop15 + pop75, data = LifeCycleSavings, order=c(1, 0, 0))
linmod <- ARDL::ardl(sr~pop15 + pop75, data = LifeCycleSavings, order=c(1, 0, 0))
# Voir le résumé du modèle
summary(linmod)
# Voir les attributs du modèle
attributes(linmod)
# Appliquer les diagnostics
model.diagnostics(linmod)
# Appliquer les diagnostics
tsatoolkit::model.diagnostics(linmod)
# Appliquer les diagnostics
tsatoolkit::model.diagnostics(linmod)
class(linmod)
# Appliquer les diagnostics
tsatoolkit::model.diagnostics(linmod, model.class = "lm")
inherits(linmod, "lm")
class(linmod)
inherits(1, c(3, 4, 1))
inherits("a", c("a", "b", "c"))
tsatoolkit::model.diagnostics(linmod)
tsatoolkit::model.diagnostics(linmod, model.class = "ardl")
inherits(linmod)
inherits(linmod, "lm")
inherits(linmod, "dynlm")
class(linmod)
tsatoolkit::model.diagnostics(linmod)
intersect(1:5, 3:10)
intersect(1:5, 3:10)[1]
tsatoolkit::model.diagnostics(linmod)
loess(linmod$residuals)
seq_along(linmod$residuals)
loess(linmod$residuals~seq_along(linmod$residuals))
predict(loess(linmod$residuals~seq_along(linmod$residuals)))
plot(linmod$residuals, type="l", main="Residuals vs Time",
ylab="Residuals", xlab="Time")
lines(seq_along(linmod$residuals), predict(loess(linmod$residuals~seq_along(linmod$residuals))), col="red", lwd=2)
lines(seq_along(linmod$residuals), predict(loess(linmod$residuals~seq_along(linmod$residuals))), col="red", lwd=.2)
plot(linmod$residuals, type="l", main="Residuals vs Time",
ylab="Residuals", xlab="Time")
lines(seq_along(linmod$residuals), predict(loess(linmod$residuals~seq_along(linmod$residuals))), col="red", lwd=.2)
plot(linmod$residuals, type="l", main="Residuals vs Time",
ylab="Residuals", xlab="Time")
lines(seq_along(linmod$residuals), predict(loess(linmod$residuals~seq_along(linmod$residuals))), col="red", lwd=.5)
lines(0)
?lines(0)
plot(cars, main = "Stopping Distance versus Speed")
lines(stats::lowess(cars))
plot(linmod$residuals)
lines(loess(linmod$residuals))
lines(lowess(linmod$residuals))
lines(seq_along(linmod$residuals), predict(loess(linmod$residuals~seq_along(linmod$residuals))), col="red", lwd=.5)
?lowess()
?loess()
?lines()
plot(linmod$residuals)
lines(y=0)
lines(y=0, type="v")
lines(y=0, type="h")
lines(0, type="h")
lines(0, type="h", col="red")
plot(linmod$residuals)
lines(0, type="h", col="red")
?abline()
plot(linmod$residuals)
lines(seq_along(linmod$residuals), predict(loess(linmod$residuals~seq_along(linmod$residuals))), col="red", lwd=.5)
abline(h=0)
plot(linmod$residuals)
lines(seq_along(linmod$residuals), predict(loess(linmod$residuals~seq_along(linmod$residuals))), col="red", lwd=.5)
abline(h=0, lwd=.5)
plot(linmod$residuals)
lines(seq_along(linmod$residuals), predict(loess(linmod$residuals~seq_along(linmod$residuals))), col="red", lwd=.5)
abline(h=0, lwd=.3)
plot(linmod$residuals, lwd=9)
?plot()
plot(linmod$residuals, lwd=9, lty=2)
plot(linmod$residuals, lty=2)
plot(linmod$residuals)
lines(seq_along(linmod$residuals), predict(loess(linmod$residuals~seq_along(linmod$residuals))), col="red", lwd=.5)
abline(h=0, lwd=.3, lty=2)
tsatoolkit::model.diagnostics(linmod$residuals^2)
tsatoolkit::model.diagnostics(linmod$residuals)
tsatoolkit::model.diagnostics(linmod)
plot(linmod$residuals, labs=0)
lm(1:3~1)
lm(1:2~1)
ardl_3132 <- ardl(LRM ~ LRY + IBO + IDE, data = denmark, order = c(3,1,3,2))
data(denmark)
install.packages("ARDL")
install.packages("ARDL")
data(denmark)
ardl_3132 <- ardl(rnorm(12) ~ rnorm(12), order = c(3,1))
ardl_3132 <-ARDL::ardl(rnorm(12) ~ rnorm(12), order = c(3,1))
denmark
data(cars)
names(cars)
ardl_3132 <- ARDL::ardl(speed ~ dist, data=cars, order = c(3,1))
summary(ardl_3132)
tsatoolkit::model.diagnostics(ardl_3132)
plot(ardl_3132)
tsatoolkit::model.diagnostics(ardl_3132)
plot(rnorm(123), type = 1)
plot(rnorm(123), type = "h")
plot(rnorm(123), type = "i")
plot(rnorm(123), type = "b")
plot(rnorm(123), type = "p")
data(cars)
names(cars)
ardl_3132 <- ARDL::ardl(speed ~ dist, data=cars, order = c(3,1))
summary(ardl_3132)
tsatoolkit::model.diagnostics(ardl_3132)
plot(ardl_3132)
plot(ardl_3132$residuals, xlab=$\rho$)
plot(ardl_3132$residuals, xlab=expression($\rho$))
plot(ardl_3132$residuals, xlab=expression(rho))
plot(ardl_3132$residuals, xlab=expression(t))
plot(ardl_3132$residuals, xlab=expression(t_5))
plot(ardl_3132$residuals, xlab=expression(\t_5))
plot(ardl_3132$residuals, xlab=expression(t\_5))
plot(ardl_3132$residuals, xlab=expression(time))
plot(ardl_3132$residuals, xlab=expression(x^3))
plot(ardl_3132$residuals, xlab=expression(x_3))
plot(ardl_3132$residuals, xlab=expression(x_{3}))
plot(ardl_3132$residuals, xlab="$X_t$")
plot(1, main=expression(beta[1]))
plot(1, main=expression(beta[x^2]))
plot(ardl_3132$residuals, xlab=base::expression(Time[t]))
plot(ardl_3132$residuals, xlab=base::expression(T[t]))
plot(ardl_3132$residuals, type="p", ylab="Residuals", main=base::expression(Residuals[t] vs Time))
plot(ardl_3132$residuals, type="p", ylab="Residuals", main=base::expression(Residuals[t]\:vs\:Time))
plot(ardl_3132$residuals, type="p", ylab="Residuals", main=expression("Residuals"[t]*" vs Time"))
plot(ardl_3132$residuals, type="p", ylab=expression(Residuals[t]), main=expression("Residuals"[t]*" vs Time"))
plot(ardl_3132$residuals, type="h", ylab=expression(Residuals[t]), main=expression("Residuals"[t]*" vs Time"))
plot(ardl_3132$residuals, type="b", ylab=expression(Residuals[t]), main=expression("Residuals"[t]*" vs Time"))
residuals_model <- ardl_3132$residuals
plot(residuals_model, type="b", ylab=expression(Residuals[t]), main=expression("Residuals"[t]*" vs Time"))
lines(seq_along(residuals_model), stats::predict(stats::loess(residuals_model~seq_along(residuals_model))), col="red", lwd=.5)
abline(h=0, lwd=.3, lty=2)
plot(ardl_3132$residuals, type="b", ylab=expression(Residuals[t]), main=expression("Residuals"[t]*" vs Time"))
plot(residuals_model, type="b", ylab=expression(Residuals[t]), main=expression("Residuals"[t]*" vs Time"))
lines(seq_along(residuals_model), stats::predict(stats::loess(residuals_model~seq_along(residuals_model))), col="red", lwd=.5)
abline(h=0, lwd=.3, lty=2)
mean(.3, .4,.5)
mean(.3, .45,.5)
mean(c.3, .45,.5))
mean(c(.3, .45,.5))
mean(c(.3, .4,.5))
data(cars)
names(cars)
ardl_3132 <- ARDL::ardl(speed ~ dist, data=cars, order = c(3,1))
summary(ardl_3132)
tsatoolkit::model.diagnostics(ardl_3132)
?acf()
FinTS::Acf(ardl_3132)
FinTS::Acf(ardl_3132$residuals)
data(cars)
names(cars)
ardl_3132 <- ARDL::ardl(speed ~ dist, data=cars, order = c(3,1))
summary(ardl_3132)
tsatoolkit::model.diagnostics(ardl_3132)
plot(ardl_3132)
tsatoolkit::model.diagnostics(ardl_3132)
data(cars)
names(cars)
ardl_3132 <- ARDL::ardl(speed ~ dist, data=cars, order = c(3,1))
summary(ardl_3132)
tsatoolkit::model.diagnostics(ardl_3132)
forecast::Acf(ardl_3132$residuals)
forecast::Acf(ardl_3132$residuals, main="e")
forecast::Acf(ardl_3132$residuals, main="e", lag.max = 20)
residuals_model <- ardl_3132$residuals
forecast::Pacf(residuals_model^2, lag.max = min(lags, length(residuals_model)-1), main=base::expression("Residuals^2"*" (ARCH Effects)")
forecast::Pacf(residuals_model^2, lag.max = min(lags, length(residuals_model)-1), main=base::expression("Residuals^2"*" (ARCH Effects)"))
forecast::Pacf(residuals_model^2, lag.max = min(20, length(residuals_model)-1), main=base::expression("Residuals^2"*" (ARCH Effects)"))
forecast::Pacf(residuals_model^2, lag.max = min(20, length(residuals_model)-1), main=base::expression(Residuals^2*" (ARCH Effects)"))
data(cars)
names(cars)
ardl_3132 <- ARDL::ardl(speed ~ dist, data=cars, order = c(3,1))
summary(ardl_3132)
tsatoolkit::model.diagnostics(ardl_3132)
data(cars)
names(cars)
ardl_3132 <- ARDL::ardl(speed ~ dist, data=cars, order = c(3,1))
summary(ardl_3132)
tsatoolkit::model.diagnostics(ardl_3132)
skedastic::white(residuals_model)
skedastic::white(residuals_model,interactions = F)
lmtest::bptest(residuals_model)
lmtest::bptest(ardl_3132)
plot(ardl_3132)
qqnorm(na.omit(residuals_model), main=expression("Q-Q "*"Residuals"[t]))
qqline(na.omit(residuals(model)), lty =2)  # Added Q-Q plot
qqnorm(na.omit(residuals_model), main=expression(Residuals[t]))
forecast::Acf(residuals_model, lag.max = min(lags, length(residuals_model)-1), main=expression(Residuals[t]))
lags=20
forecast::Acf(residuals_model, lag.max = min(lags, length(residuals_model)-1), main=expression(Residuals[t]))
forecast::Acf(residuals_model^2, lag.max = min(lags, length(residuals_model)-1), main=base::expression(Residuals^2*" (ARCH Effects)"))
#abline(h = 2 * stats::sd(residuals_model, na.rm = TRUE),  lwd=.5, lty=2)
#abline(h = -2 * stats::sd(residuals_model, na.rm = TRUE), lwd=.5, lty=2)
qqnorm(na.omit(residuals_model), main=expression("Q-Q "*"Residuals"[t]))
model <- rnorm(1)
# Extract residuals based on model type
residuals_model <- ifelse(is.numeric(model),
model,
tryCatch({
switch(model.class,
"lm" = residuals(model),
"glm" = residuals(model, type = "deviance"),
"ardl" = residuals(model),
"dynlm" = residuals(model),
"arma" = residuals(model),
"ar" = residuals(model),
"dynardl" = model$model$residuals)
}, error = function(e) {
stop(sprintf("Error extracting residuals: %s", e$message))
}))
residuals_model
model <- rnorm(12)
# Extract residuals based on model type
residuals_model <- ifelse(is.numeric(model),
model,
tryCatch({
switch(model.class,
"lm" = residuals(model),
"glm" = residuals(model, type = "deviance"),
"ardl" = residuals(model),
"dynlm" = residuals(model),
"arma" = residuals(model),
"ar" = residuals(model),
"dynardl" = model$model$residuals)
}, error = function(e) {
stop(sprintf("Error extracting residuals: %s", e$message))
}))
residuals_model
model <- lm(rnorm(12)~1)
# Extract residuals based on model type
residuals_model <- ifelse(is.numeric(model),
model,
tryCatch({
switch(model.class,
"lm" = residuals(model),
"glm" = residuals(model, type = "deviance"),
"ardl" = residuals(model),
"dynlm" = residuals(model),
"arma" = residuals(model),
"ar" = residuals(model),
"dynardl" = model$model$residuals)
}, error = function(e) {
stop(sprintf("Error extracting residuals: %s", e$message))
}))
# Get model class if not specified
if (is.null(model.class)) {
model_classes <- class(model)
# First check for time series classes
ts_match <- intersect(model_classes, ts_classes)
if (length(ts_match) > 0) {
# Take the first time series class found
model.class <- ts_match[1]
} else {
# If no time series class found, take the first supported class
supported_match <- intersect(model_classes, supported_types)
if (length(supported_match) > 0) {
model.class <- supported_match[1]
} else {
model.class <- model_classes[1]  # Fallback to first class
}
}
}
model <- lm(rnorm(12)~1) ; model.class <- class(model)
# Extract residuals based on model type
residuals_model <- ifelse(is.numeric(model),
model,
tryCatch({
switch(model.class,
"lm" = residuals(model),
"glm" = residuals(model, type = "deviance"),
"ardl" = residuals(model),
"dynlm" = residuals(model),
"arma" = residuals(model),
"ar" = residuals(model),
"dynardl" = model$model$residuals)
}, error = function(e) {
stop(sprintf("Error extracting residuals: %s", e$message))
}))
residuals_model
class(model)
residuals(model)
model <- lm(rnorm(12)~1) ; model.class <- class(model)
model.class
# Extract residuals based on model type
residuals_model <- ifelse(is.numeric(model),
model,
tryCatch({
switch(model.class,
"lm" = residuals(model),
"glm" = residuals(model, type = "deviance"),
"ardl" = residuals(model),
"dynlm" = residuals(model),
"arma" = residuals(model),
"ar" = residuals(model),
"dynardl" = model$model$residuals)
}, error = function(e) {
stop(sprintf("Error extracting residuals: %s", e$message))
}))
residuals_model
data(cars)
names(cars)
ardl_3132 <- ARDL::ardl(speed ~ dist, data=cars, order = c(3,1))
summary(ardl_3132)
tsatoolkit::model.diagnostics(ardl_3132)
residuals_model <-if (is.numeric(model)) {
model
}else{
tryCatch({
switch(model.class,
"lm" = residuals(model),
"glm" = residuals(model, type = "deviance"),
"ardl" = residuals(model),
"dynlm" = residuals(model),
"arma" = residuals(model),
"ar" = residuals(model),
"dynardl" = model$model$residuals)
}, error = function(e) {
stop(sprintf("Error extracting residuals: %s", e$message))
})
}
residuals_model
model <- rnorm(12)
residuals_model <-if (is.numeric(model)) {
model
}else{
tryCatch({
switch(model.class,
"lm" = residuals(model),
"glm" = residuals(model, type = "deviance"),
"ardl" = residuals(model),
"dynlm" = residuals(model),
"arma" = residuals(model),
"ar" = residuals(model),
"dynardl" = model$model$residuals)
}, error = function(e) {
stop(sprintf("Error extracting residuals: %s", e$message))
})
}
residuals_model
model <- lm(rnorm(3)~1)
residuals_model <-if (is.numeric(model)) {
model
}else{
tryCatch({
switch(model.class,
"lm" = residuals(model),
"glm" = residuals(model, type = "deviance"),
"ardl" = residuals(model),
"dynlm" = residuals(model),
"arma" = residuals(model),
"ar" = residuals(model),
"dynardl" = model$model$residuals)
}, error = function(e) {
stop(sprintf("Error extracting residuals: %s", e$message))
})
}
residuals_model
ardl_3132 <- ARDL::ardl(speed ~ dist, data=cars, order = c(3,1))
tsatoolkit::model.diagnostics(ardl_3132)
tsatoolkit::model.diagnostics(rnorm(12))
tsatoolkit::model.diagnostics(ardl_3132, model.class = "ar")
tsatoolkit::model.diagnostics(ardl_3132, model.class = "arma")
tsatoolkit::model.diagnostics(ardl_3132, model.class = "arma")
tsatoolkit::model.diagnostics(ardl_3132, model.class = "lm")
tsatoolkit::model.diagnostics(ardl_3132, model.class = "lm")
tsatoolkit::model.diagnostics(ardl_3132, model.class = "lm")
tsatoolkit::model.diagnostics(rnorm(12), model.class = "lm")
tsatoolkit::model.diagnostics(rnorm(12), model.class = "arma")
tsatoolkit::model.diagnostics(rnorm(12))
tsatoolkit::model.diagnostics(rnorm(12), model.class = "glm")
tsatoolkit::model.diagnostics(rnorm(12), model.class = "ardl")
ardl_3132 <- ARDL::ardl(speed ~ dist, data=cars, order = c(3,1))
tsatoolkit::model.diagnostics(ardl_3132)
data(mtcars)
mtcars
data()
data(sleep)
sleep
data("discoveries")
discoveries
data("airquality")
airquality
airmiles
USAccDeaths
Orange
EuStockMarkets
base::as.data.frame(EuStockMarkets)
name <- function(x, y) {
x+y
}
name(x=1, y=9)
diff.and.lags <- function(data, diff.vars = NULL, diff.log.vars = NULL, lag.vars, max.lags) {
# Validate inputs
if (!is.data.frame(data)) stop("data must be a dataframe")
if (missing(lag.vars) || !is.character(lag.vars)) stop("lag.vars must be a character vector")
if (missing(max.lags) || !is.numeric(max.lags) || max.lags < 1) stop("max.lags must be a positive integer")
# Step 1: Compute simple differences (if diff.vars is provided)
if (!is.null(diff.vars)) {
for (var in diff.vars) {
if (!var %in% names(data)) stop(paste("Variable", var, "not found in data"))
diff_col <- c(NA, diff(data[[var]]))
data[[paste0("d", var)]] <- round(diff_col, 3)
}
}
# Step 2: Compute logarithmic differences (if diff.log.vars is provided)
if (!is.null(diff.log.vars)) {
for (var in diff.log.vars) {
if (!var %in% names(data)) stop(paste("Variable", var, "not found in data"))
if (any(data[[var]] <= 0, na.rm = TRUE)) stop(paste("Variable", var, "must be strictly positive for log differences"))
diff_log_col <- c(NA, diff(log(data[[var]])))
data[[paste0("dl", var)]] <- round(diff_log_col, 3)
}
}
# Step 3: Generate lags for each variable and lag level
for (var in lag.vars) {
if (!var %in% names(data)) stop(paste("Variable", var, "not found in data"))
for (i in 1:max.lags) {
data[[paste0("l.", i, ".", var)]] <- c(rep(NA, i), data[[var]][1:(length(data[[var]]) - i)])
}
}
return(data)
}
EuStockMarkets
diff.and.lags(EuStockMarkets, lag.vars = DAX )
EuStockMarkets <- as.data.frame(EuStockMarkets)
diff.and.lags(EuStockMarkets, lag.vars = DAX )
diff.and.lags(EuStockMarkets, lag.vars = "DAX" )
EuStockMarkets <- as.data.frame(EuStockMarkets) ; head(EuStockMarkets)
head(dimnames(EuStockMarkets))
head(dimnames(EuStockMarkets))[1:5]
EuStockMarkets <- as.data.frame(EuStockMarkets) ; head(EuStockMarkets)
diff.and.lags(EuStockMarkets, lag.vars = "DAX" )
diff.and.lags(EuStockMarkets, lag.vars = "DAX", max.lags = 2 )
objects()
devtools::document()
?tsatoolkit::lagsDiff()
?tsatoolkit::ts.diagnostics()
tsatoolkit::ts.diagnostics(longley$GNP)
adf.test(longley$GNP)
tseries::adf.test(longley$GNP)
tseries::adf.test(longley$GNP, k = 9)
tseries::adf.test(longley$GNP, k = 3)
tseries::kpss.test(longley$GNP)
tseries::kpss.test(longley$GNP, null = "trend")
tseries::kpss.test(longley$GNP, null = "Trend")
base::seq_along(longley$GNP)
installed.packages(sandwich)
devtools::document()
tsatoolkit::tsDiagnostics(longley$GNP)
?tsatoolkit::modelDiagnostics()
longley
intersect(1:6, c(29, 2,5, 1))
devtools::document()
